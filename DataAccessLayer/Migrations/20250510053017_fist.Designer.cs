// <auto-generated />
using System;
using DataAccessLyer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250510053017_fist")]
    partial class fist
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLyer.Entities.AppEntities.DeviceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("abbreviation");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("DaviceCategories", (string)null);
                });

            modelBuilder.Entity("DataAccessLyer.Entities.AppEntities.Notifiction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsRead");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("Message");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("sentAt");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserID");

                    b.ToTable("Notifictions", (string)null);
                });

            modelBuilder.Entity("DataAccessLyer.Entities.AppEntities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AttachementPath");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("CreateDate");

                    b.Property<int>("DeciveCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("DeviceCtegoryID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Description");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TicketNumber");

                    b.Property<int>("TicketStatusId")
                        .HasColumnType("int")
                        .HasColumnName("TicketStatusId");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("updateDate");

                    b.HasKey("Id");

                    b.HasIndex("DeciveCategoryId");

                    b.HasIndex("TicketStatusId");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("DataAccessLyer.Entities.AppEntities.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("TicketsStatus", (string)null);
                });

            modelBuilder.Entity("DataAccessLyer.Entities.AppEntities.TicketTrace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("CreateTime");

                    b.Property<int>("NewStatusID")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Note");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    b.Property<int>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("UpdateTime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketsTrace", (string)null);
                });

            modelBuilder.Entity("DataAccessLyer.Entities.UserEntities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("DataAccessLyer.Entities.UserEntities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("user_id");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Department");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Password");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DataAccessLyer.Entities.UserEntities.UserRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Role_id");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("user_id");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("DataAccessLyer.Entities.AppEntities.Notifiction", b =>
                {
                    b.HasOne("DataAccessLyer.Entities.AppEntities.Ticket", "_ticket")
                        .WithMany("Notifictions")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLyer.Entities.UserEntities.User", "_user")
                        .WithMany("Notifictions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("_ticket");

                    b.Navigation("_user");
                });

            modelBuilder.Entity("DataAccessLyer.Entities.AppEntities.Ticket", b =>
                {
                    b.HasOne("DataAccessLyer.Entities.AppEntities.DeviceCategory", "_deviceType")
                        .WithMany("Tickets")
                        .HasForeignKey("DeciveCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLyer.Entities.AppEntities.TicketStatus", "_status")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("_deviceType");

                    b.Navigation("_status");
                });

            modelBuilder.Entity("DataAccessLyer.Entities.AppEntities.TicketTrace", b =>
                {
                    b.HasOne("DataAccessLyer.Entities.AppEntities.Ticket", "_ticket")
                        .WithMany("ticketTraces")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLyer.Entities.AppEntities.TicketStatus", "_ticketStatus")
                        .WithMany("TicketsTraces")
                        .HasForeignKey("TicketStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLyer.Entities.UserEntities.User", "_user")
                        .WithMany("TicketTraces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("_ticket");

                    b.Navigation("_ticketStatus");

                    b.Navigation("_user");
                });

            modelBuilder.Entity("DataAccessLyer.Entities.UserEntities.UserRole", b =>
                {
                    b.HasOne("DataAccessLyer.Entities.UserEntities.Role", "_role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLyer.Entities.UserEntities.User", "_user")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("_role");

                    b.Navigation("_user");
                });

            modelBuilder.Entity("DataAccessLyer.Entities.AppEntities.DeviceCategory", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("DataAccessLyer.Entities.AppEntities.Ticket", b =>
                {
                    b.Navigation("Notifictions");

                    b.Navigation("ticketTraces");
                });

            modelBuilder.Entity("DataAccessLyer.Entities.AppEntities.TicketStatus", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("TicketsTraces");
                });

            modelBuilder.Entity("DataAccessLyer.Entities.UserEntities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DataAccessLyer.Entities.UserEntities.User", b =>
                {
                    b.Navigation("Notifictions");

                    b.Navigation("TicketTraces");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
